<section:index>
<b>Краткая документация по PHPC</b><br><br>

Добро пожаловать во встроенную документацию по PHPC. Пожалуйста, выберите
интересующий вас пункт из списка ниже.<br><br>

<ul>
<li><a href="{section:overview}">Введение в PHPC</a></li>
<li><a href="{section:tags}">Специальные теги</a></li>
<li><a href="{section:tips}">Рекомендации по разработке сайта</a></li>
<li><a href="{section:afterword}">Послесловие</a></li>
</ul><br><hr>
</section:index>

<section:overview>
<b>Введение в PHPC</b><br><br>

PHPC (расшифровывается как PHP Compiler) - это система для разработки
веб-проектов, непохожая на существующие технологии. Вся структура вашего сайта
хранится в базе данных, и когда посетитель запрашивает ту или иную страницу,
данные о ней извлекаются из базы, собираются в готовую HTML-страницу и
отправляются посетителю. Такой подход к созданию сайта имеет много преимуществ.
Во-первых, мощная система шаблонов позволяет создать сколь угодно сложный по
структуре дизайн, а специальные теги управления позволяют &quot;оживить&quot;
его динамической информацией (новости, статьи, галереи и т. д.). Во-вторых,
система стилей позволяет создавать несколько вариантов оформления сайта.
В-третьих, PHPC предоставляет богатые возможности для программирования
поведения сайта - класс Database для удобной работой с БД, набор функций для
обработки данных, которых нет в PHP, и админскую панель, которая позволит вам
всем этим управлять.<br><br>

Поведение сайта полностью зависит от набора основных &quot;сущностей&quot;. Это
страницы сайта, шаблоны, пакеты, подстановки, правила форматирования текста,
правила обработки ссылок и стили. Рассмотрим их подробнее.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Страницы сайта</b><br><br>

В обычных сайтах каждая страница - это отдельный файл (например, index.php). В
PHPC все страницы хранятся не в файлах, а в базе данных. Каждая страница - это
одна строка в таблице &quot;pages&quot;. Для управления страницами
предусмотрена закладка &quot;Страницы сайта&quot;. Если вы хотите создать новую
страницу на сайте, просто добавьте ее при помощи функции &quot;Создать&quot; -
ничего закачивать на сервер не нужно.<br><br>

Каждая страница имеет ряд важных атрибутов:<br>
<ul>
<li><b>Имя страницы</b> - тут все ясно, если, например, ваш сайт находится по
адресу www.yourproject.com, а имя страницы - shop, то запрос, который приведет
к отображению этой страницы, будет выглядеть как http://www.yourproject.com/shop.
Обратите внимание, что в PHPC у страниц нет расширений. Старайтесь давать
страницам простые, но вместе с тем понятные имена. Не делайте слишком длинные
имена у страниц, иначе ими будет неудобно пользоваться в шаблонах.</li>
<li><b>Внешнее имя</b> - если вы хотите, чтобы ссылка выглядела более понятно
для посетителя, вы можете указать странице внешнее имя. Например, для страницы
shop можно указать внешнее имя WonderfulBookStore. Учтите, это только для
посетителей! Внутри системы вам по-прежнему следует использовать имя shop.</li>
<li><b>Предок</b> - если указан, страница унаследует у страницы-предка все
пропущенные атрибуты (кроме имени, разумеется). Используйте эту возможность,
чтобы на основе одной готовой страницы сайта создавать другие.</li>
<li><b>Шаблон</b> - очень важный атрибут. Здесь хранится имя шаблона, который
будет использован для отображения страницы. Сами страницы ничего не выводят -
для этого предназначены шаблоны. Если вы создаете новую страницу, то, скорее
всего, вам понадобится создать также и новый шаблон для нее. Страница может
и не иметь шаблона, если она только выполняет какие-то действия и
переадресовывает посетителя на другую страницу. Такие страницы называются
контроллерами, и у них имя (как правило) начинается на &quot;action&quot;.</li>
<li><b>Пакеты</b> - список имен пакетов через запятую либо пустая строка, если
странице не нужны пакеты. Пакеты - это фрагменты PHP-кода, которые формируют
необходимые для отображения страницы данные.</li>
<li><b>Заголовок</b> - заголовок страницы. Как правило, используется в шаблонах
внутри тегов &lt;title&gt;...&lt;/title&gt;.</li>
<li><b>Дополнительные параметры</b> - список параметров для страницы, которые
задаются вручную. Используйте эту возможность, чтобы создавать семейство
похожих страниц, например, группы страниц на базе одного и того же
шаблона/пакета.</li>
<li><b>Доступна ли страница</b> - если хранит значение &quot;Нет&quot;, то
страница будет недоступна &quot;снаружи&quot;. Пользуйтесь этой возможностью,
чтобы временно отключить страницу вместо того, чтобы удалять ее, а также для
того, чтобы закрыть доступ к базовым страницам (страницам, которые сами по себе
не должны отображаться, но от которых наследуются другие страницы).</li>
</ul><br>

При установке PHPC автоматически создается 2 страницы: <b>index</b> и
<b>404</b>. Первая страница - это главная страница сайта, которая будет
использоваться и в том случае, если в запросе не указано имя страницы
(например, http://www.yourproject.com/). Вторая - это страница сообщения об
ошибке, которая будет использоваться в том случае, если посетитель запросил
страницу, которой нет в базе.<br><br>

Для удобства управления страницы можно объединять в группы. Просто создайте
группу и укажите подходящий префикс - все страницы, имя которых начинается с
этого префикса, будут автоматически собраны в эту группу.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Шаблоны</b><br><br>

Шаблоны - это та часть движка, с которой вы будете иметь дело чаще всего.
Говоря простым языком, шаблон - это обычная HTML-страница или ее часть, но с
набором дополнительных возможностей. Шаблоны можно вставлять друг в друга при
помощи тега &lt;insert:...&gt;, в шаблонах можно выводить значения переменных,
для этого служит тег &lt;var:...&gt;, в них можно даже вставлять проверку
условий и выполнение циклов, для всего этого есть специальные теги. Также можно
наследовать шаблоны друг от друга - у унаследованного шаблона перекрывается
только определенная часть, а остальная &quot;заимствуется&quot; из базового.
Все это позволяет вам сверстать сложную по структуре страницу из нескольких
несложных шаблонов.<br><br>

Каждый шаблон имеет следующие атрибуты:<br>
<ul>
<li><b>Имя</b> - имя шаблона. Используется в атрибутах страниц, а также при
вставке одних шаблонов в другие.</li>
<li><b>Предок</b> - имя шаблона, от которого наследуется данный шаблон, либо
пустая строка.</li>
<li><b>Текст</b> - собственно текст шаблона.</li>
</ul><br>

<b>Внимание:</b> если вы хотите сделать в шаблоне ссылку на другую страницу
сайта, ссылку нельзя оформлять как обычный тег &lt;a href=&quot;...&quot;&gt;.
Это связано с тем, что внешний вид ссылки может меняться (у страницы может
появиться внешнее имя, может сработать правило представления ссылок и т. д.) и
&quot;намертво&quot; зашивать его в шаблон недопустимо. Для формирования ссылок
(как с тегом &lt;a&gt;, так и без него) предусмотрены специальные теги:
&lt;write:anchor ...&gt; и &lt;write:link ...&gt;. В теге следует указать
параметр property (имя конечной страницы), а также, при необходимости,
дополнительные параметры.<br><br>

Шаблоны, как и пакеты, можно объединять в группы. Для этого достаточно дать
однотипным шаблонам имена, начинающиеся с одинакового префикса (например, для
шаблонов, формирующих страницы, можно дать префикс &quot;page&quot;), и создать
новую группу с данным префиксом.<br><br>

У шаблонов, а также у пакетов и подстановок (о которых речь ниже), есть еще
одна особенность - все они разобраны по наборам. Каждый шаблон автоматически
принадлежит определенному набору. При установке движка создается набор
&quot;Обычный&quot;, и все новые шаблоны попадают в него. Но вы можете создать
новый набор, переключиться на него и в будущем работать с другим набором.
Наборы могут быть унаследованы друг от друга, причем наследование набора
означает наследование всех его элементов. Из-за наследования наборов шаблоны
могут быть отображены в панели по-разному: <font class="default"><b>таким
цветом</b></font> отображаются обычные шаблоны, <font class="original"><b>таким
цветом</b></font> отображаются шаблоны из набора-предка, а
<font class="inherited"><b>таким цветом</b></font> отображаются шаблоны из
текущего набора, перекрывающие аналогичные шаблоны из набора-предка.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Пакеты</b><br><br>

Одно из наиболее важных достоинств PHPC (по мнению автора) - это разделение
дизайна и программного кода. В обычных PHP-сайтах оформление страницы идет
вперемежку с формированием и выводом данных, это создает проблемы при внесении
изменений, да и выглядит не очень &quot;опрятно&quot;. В PHPC код полностью
отделен от оформления страницы, и хранится в пакетах.<br><br>

Пакет - это просто кусок программного кода на языке PHP, ничем не отличающийся
от обычного (за исключением того, что в нем нет тегов &lt;?php ... ?&gt;). В
этом фрагменте доступны следующие переменные и классы: $language, $settings,
$fileSystem, $mailSystem, $database, $formatter, $optimizer, $compiler,
$currentStyle, $currentSession, $currentPage. Более подробно познакомиться с
ними можно на сайте PHPC. Все переменные, которые вы создадите в пакете, будут
впоследствии переданы в шаблон. Таким образом, вы теперь можете одной строкой в
пакете извлечь данные (например, новости) из базы, а в шаблоне двумя-тремя
тегами организовать по ним цикл и вывести новости на экран, оформив их так, как
считаете нужным. Заманчиво, правда?<br><br>

Каждый пакет имеет следующие атрибуты:<br>
<ul>
<li><b>Имя</b> - имя пакета. Используется в страницах (причем каждая страница
может вызывать несколько пакетов, а может и не использовать их вовсе).</li>
<li><b>Список плагинов</b> - если для работы страницы требуются какие-либо
особо сложные расчеты (иногда и так бывает), то лучше весь этот код не хранить
в пакете, а вынести в отдельный PHP файл, оформив в виде класса или набора
функций, и поместить его в каталог plugins. Здесь же нужно указать только имя
файла с плагином (без расширения). Можно также указать несколько плагинов через
запятую, например, &quot;colorer,zipfile&quot;.</li>
<li><b>Текст</b> - собственно текст пакета.</li>
</ul><br>

Из соображений безопасности внешние параметры (те, что передаются через запрос
либо через данные форм) в пакетах недоступны просто так. Для их получения
предназначены функции acceptIntParameter, acceptFloatParameter и
acceptStringParameter.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Подстановки</b><br><br>

Подстановки - это набор простых правил замены. Когда происходит компиляция
страницы, все шаблоны предварительно обрабатываются этими правилами.
Использовать подстановки можно, например, в случае, если два стиля отличаются
друг от друга только набором подстановок (а шаблоны у них одинаковые). В этом
случае можно влиять на дизайн страницы, даже не трогая шаблоны.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Правила форматирования текста</b><br><br>

Если вы когда-либо бывали на форумах, то наверняка заметили, что в них для
оформления сообщений используются специальные теги, так называемые BB-коды.
Пример такого кода - [b]...[/b]. Они достаточно мощные, и в то же время они
безопаснее обычных HTML-тегов. Подобные коды поддерживаются и в PHPC. Вы можете
по своему желанию создавать или удалять правила форматирования. Для того, чтобы
в шаблоне вывести отформатированный этими правилами текст, предусмотрен
специальный тег - &lt;write:format ...&gt;.<br><br>

Каждое правило имеет следующие атрибуты:<br>
<ul>
<li><b>Название</b> - просто название правила, используется только в админской
панели.</li>
<li><b>Класс</b> - название категории (например, &quot;smilies&quot;), к
которой принадлежит данное правило, либо пустая строка. При использовании тега
&lt;write:format&gt; можно указать, какие правила разрешено использовать при
обработке текста, а какие - нет.</li>
<li><b>Паттерн</b> - регулярное выражение, которое используется при поиске
правила в форматируемом тексте.</li>
<li><b>Текст замены</b> - текст, который будет использоваться для подстановки в
найденный фрагмент. Вы можете использовать ссылки на субпаттерны в этом тексте,
например \1, \2 и т. д.</li>
<li><b>Функция замены</b> - вместо текста замены можно использовать функцию,
которая на основе найденного фрагмента вычисляет и возвращает текст замены.
Разумеется, эту функцию нужно предварительно написать и встроить в PHPC.</li>
<li><b>Пример текста</b> - пример текста, демонстрирующего использование
данного правила форматирования.</li>
<li><b>Порядок</b> - целочисленное значение, которое определяет порядок
применения правил.</li>
</ul><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Правила обработки ссылок</b><br><br>

PHPC прозрачно поддерживает так называемые ЧПУ - &quot;человеко-понятные
URL&quot;. Например, он позволяет сделать так, чтобы вместо ссылки типа
<b>gallery?subject=nature&id=123</b> отображалась и правильно обрабатывалась
ссылка <b>gallery/nature/123</b>. Для этого достаточно создать правило
следующего вида: <b>gallery/$subject/$id</b> и связать его со страницей
gallery. Ни на страницах, ни в шаблонах/пакетах ничего менять не
нужно.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Стили</b><br><br>

Если вы только что начали работу над сайтом, то вам, скорее всего, не
понадобятся возможности, которые предоставляет система стилей. Но если в
будущем вы надумаете провести редизайн сайта, или сделать его WAP-версию, или
временно сменить его облик - то эти возможности могут вам здорово пригодиться.
Стиль - это текущее представление сайта. Он состоит из набора шаблонов, набора
пакетов и набора подстановок. Если вы хотите изменить компоновку главной
страницы (но при этом хотите сохранить старый вариант), вам следует создать
новый набор шаблонов, унаследовать его от старого, а затем создать новый стиль
с новым набором шаблонов, выбрать его как рабочий стиль и далее работать уже с
ним.<br><br>

Можно поступить по-другому - не создавать новый набор шаблонов, а
усовершенствовать имеющийся: во всех местах, которые могут измениться при
&quot;смене облика&quot; сайта, вставить подстановки, например, вместо адреса
титульной картинки подставить &quot;{titleImage}&quot;. Затем в имеющемся
наборе подстановок создать новую подстановку {titleImage}, и в ее значении
прописать тот самый адрес картинки. Меняя стиль, вы уже не трогаете шаблоны, а
просто создаете новый набор подстановок, с новыми значениями. Вообще,
использование стилей может ограничить только ваше воображение.<br><br><hr>
</section:overview>

<section:tags>
<b>Специальные теги</b><br><br>

В шаблонах PHPC поддерживается большое количество различных тегов, которые
похожи на обычные HTML-теги, но предназначены для выполнения специальных
действий. Рассмотрим эти теги подробнее.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Общий синтаксис</b><br><br>

В общем случае специальный тег выглядит примерно так же, как и обычный:<br><br>

<font class="html_tag"><b>&lt;типТега:названиеТега
<font class="html_param">параметр1=<font class="html_value">&quot;Пример
строки&quot;</font> параметр2=переменная</font> ...&gt;</b></font><br><br>

Важное отличие заключается в том, что в заголовке PHPC-тега присутствует
двоеточие, которое разделяет его на тип тега и название тега. Существует шесть
основных типов тегов: <b>var</b> (вывод значений переменных), <b>const</b>
(вывод констант), <b>write</b> (вывод данных с дополнительными возможностями),
<b>area</b> (наследование в шаблонах), <b>insert</b> (вставка другого шаблона)
и <b>logic</b> (условия и циклы). Далее будет подробно описан каждый из этих
типов.<br><br>

Параметры в тегах можно передавать тремя способами:<br>
<ul>
<li><b>Строкой</b> - при этом можно использовать только двойные кавычки, а
правила экранирования символов и подстановки переменных действуют такие же, как
и у строк с двойными кавычками в PHP.</li>
<li><b>Значением</b> - после знака равенства пишется просто имя переменной (без
символа &quot;$&quot;). Для обращения к элементу массива можно указать
несколько имен, разделенных двоеточием - первое имя будет использовано как имя
массива, а остальные - для адресации в нем. Например, запись user:group:0
эквивалентна выражению $user[&quot;group&quot;][0]. Адресация элемента по
переменной, например, $user[$group], не поддерживается. Если данная
переменная или элемент массива отсутствуют (не определены), то параметр не
будет передан.</li>
<li><b>Без указания значения</b> - вы пишете только название параметра, а в
качестве значения передается true.</li>
</ul><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Одиночные и парные теги</b><br><br>

Есть две категории тегов PHPC: одиночные и парные. К одиночным относятся теги
<b>var</b>, <b>const</b> и <b>write</b>, а к парным - теги <b>area</b>,
<b>insert</b> и <b>logic</b>. Все парные теги должны присутствовать в шаблоне
в двух экземплярах - открывающий и закрывающий:<br><br>

<b>&lt;insert:anotherTemplate&gt;<br>
...<br>
&lt;/insert:anotherTemplate&gt;</b><br><br>

Либо должны быть оформлены как комбинированный тег:<br><br>

<b>&lt;insert:anotherTemplate/&gt;</b><br><br>

У парных тегов определено понятие контента тега - это часть шаблона между
открывающим и закрывающим тегами. У комбинированных тегов контент отсутствует
(пустой). Параметры можно передавать только открывающим и комбинированным
тегам, закрывающим нельзя. Если синтаксис тега нарушен, страницу не удастся
скомпилировать и PHPC выдаст сообщение об ошибке.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Тег VAR - вывод значения переменной</b><br><br>

Имеет следующий синтаксис:<br><br>

<font class="html_tag"><b>&lt;var:переменная <font
class="html_param">модификатор1 модификатор2=<font
class="html_value">&quot;значение&quot;</font></font>
...&gt;</b></font><br><br>

Данный тег выводит значение переменной $переменная. Перед выводом
автоматически производится фильтрация текста - преобразование символов
&amp;,&lt;,&gt;,&quot; в соответствующие HTML-представления, а также перед
каждый переносом строки вставляется &quot;&lt;br&gt;&quot;. Внимание:
HTML-представления, присутствующие в исходном тексте, остаются &quot;как
есть&quot;. Например, комбинация символов &quot;&amp;minus;&quot; будет
выглядеть как &quot;&minus;&quot;.<br><br>

Поддерживаются следующие модификаторы:<br>
<ul>
<li><b>date</b> - вывод даты (в переменной должна храниться дата в формате
Unix-Timestamp).</li>
<li><b>time</b> - вывод времени (в переменной должна храниться дата в формате
Unix-Timestamp).</li>
<li><b>datetime</b> - вывод даты и времени. Дата/время выводятся в
локализованном виде, например, &quot;1 января 2010, 18:00&quot;. Кроме форматов
date, time и datetime можно вводить другие форматы отображения даты/времени -
для этого достаточно внести изменения в элемент массива локализации
$language[&quot;format_datetime&quot;] (файл language/xx/common_xx.php).
Изменения нужно вносить сразу во все поддерживаемые локали!</li>
<li><b>integer</b> - вывод в специальном целочисленном формате.</li>
<li><b>float</b> - вывод в вещественном формате.</li>
<li><b>length</b> - вывод длины данной строки.</li>
<li><b>count</b> - вывод количества элементов в данном массиве.</li>
<li><b>email</b> - антиспам-защита e-mail адреса.</li>
<li><b>uppercase</b> - перевод строки в верхний регистр.</li>
<li><b>lowercase</b> - перевод строки в нижний регистр.</li>
<li><b>titlecase</b> - перевод первого символа строки в верхний регистр.</li>
<li><b>wordscase</b> - перевод первого символа каждого слова в строке в верхний
регистр.</li>
<li><b>trim</b> - обрезание строки (по аналогии с функцией PHP trim()). В
качестве значения модификатора вы можете указать список удаляемых символов.</li>
<li><b>ltrim</b> - действует аналогично модификатору trim, но затрагивает
только начало строки.</li>
<li><b>rtrim</b> - действует аналогично модификатору trim, но затрагивает
только конец строки.</li>
<li><b>textarea</b> - включает специальную фильтрацию символов для вывода
значений элементов &lt;input&gt;, &lt;textarea&gt; и т. д. в формах.</li>
<li><b>nofilter</b> - отмена фильтрации. Текст будет выведен &quot;как
есть&quot;.</li>
<li><b>default</b> (данному параметру нужно указать значение) - если переменная
отсутствует, вместо нее будет выведено это значение.</li>
</ul><br>

Особый случай представляет следующий синтаксис тега:<br><br>

<b>&lt;var:content&gt;</b><br><br>

Вместо данного тега в шаблон будет подставлен его контент, переданный шаблону
при его вызове.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Тег CONST - вывод констант</b><br><br>

Данный тег имеет точно такой же синтаксис, что и тег var, и поддерживает
аналогичный список модификаторов, но служит он для вывода значений констант, а
не переменных. Например, следующий фрагмент выводит минимальную
продолжительность сессии в секундах:<br><br>

<b>&lt;const:PhpcSessionTimeout&gt;</b><br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Тег WRITE - специфические функции вывода</b><br><br>

В зависимости от названия, тег выполняет различные функции: создание линка на
другую страницу (тег <b>write:link</b>), создание HTML-ссылки на другую
страницу (тег <b>write:anchor</b>), вывод форматированного текста (тег
<b>write:format</b>), отображение значений по очереди (тег <b>write:cycle</b>),
отладка (тег <b>write:trace</b>).<br><br>

Рассмотрим каждую функцию подробнее:<br>
<ul>
<li><b>Создание линка на другую страницу</b> - используйте этот тег, если вам в
шаблоне нужно получить ссылку на другую страницу сайта (например, в поле action
у формы). Укажите в теге параметр <b>property</b> (имя страницы), а также при
необходимости - дополнительные параметры. Например, тег <b>&lt;write:link
property=&quot;shop&quot; section=&quot;hardware&quot;
id=&quot;123&quot;&gt;</b> приведет к генерации ссылки
<b>/shop?section=hardware&id=123</b>. Конечно, ссылка может выглядеть и
по-другому, если у вас настроены правила ЧПУ или внешние имена страниц. Именно
поэтому для генерации ссылок следует пользоваться тегом write.</li>
<li><b>Создание HTML-ссылки на другую страницу</b> - данный тег является
расширением предыдущего, он генерирует не только адрес, но и полностью HTML-код
ссылки на другую страницу сайта. Параметры такие же, как и в прошлом случае, за
исключением следующих: укажите дополнительный параметр <b>content</b> с текстом
ссылки, и при необходимости укажите параметр <b>target</b>, если ссылка должна
вести на другой фрейм, или должна открываться в новом окне. Пример тега:
<b>&lt;write:anchor property=&quot;shop&quot; content=&quot;Магазин&quot;
target=&quot;_blank&quot;&gt;</b>.</li>
<li><b>Вывод форматированного текста</b> - перед выводом к тексту применяются
правила форматирования. Укажите в теге параметр <b>property</b> (строка или
переменная с исходным текстом). Также можно указать дополнительные параметры:
<b>class</b> (перечислите через запятую список допустимых классов
форматирования), <b>strict</b> (удаление из текста всех переносов строк и
лишних пробелов, т. е. превращение его в сплошной &quot;поток&quot; текста),
<b>limit</b> (укажите максимальную длину в символах и текст, превышающий это
ограничение, будет обрезан), <b>pars</b> (используйте этот параметр, чтобы
разделить текст на абзацы тегами &lt;p&gt;...&lt;/p&gt; вместо обычных тегов
переноса строки) и <b>wrap</b> (укажите ширину в символах и данный текст в
исходном HTML-коде будет отформатирован по этой ширине). Пример:
<b>&lt;write:format property=news class=&quot;smilies&quot; pars&gt;</b>.</li>
<li><b>Поочередное отображение значений</b> - данный тег, если его вызывать в
шаблоне несколько раз, отображает один за другим значения переданных ему
параметров, выбирая из них одно в зависимости от количества вызовов. Если
передать ему два параметра (названия параметров не имеют значения), тег будет
выводить их поочередно. Используйте тег cycle, например, для создания таблиц с
чередующимся фоновым цветом у строк. Используя необязательный параметр
<b>property</b>, вы также можете создавать несколько независимых циклов. Пример
использования тега: <b>&lt;write:cycle color1=&quot;#ffffff&quot;
color2=&quot;#f0f0f0&quot;&gt;</b>.</li>
<li><b>Отладка (вывод значения переменной)</b> - укажите в параметре
<b>property</b> переменную, которая вас интересует (обычно это сложная
структура или массив), и тег выведет на экран ее подробное содержание в удобном
для программиста виде, после чего завершит работу скрипта. Пример использования
данного тега: <b>&lt;write:trace property=shopCard&gt;</b>.</li>
</ul><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Тег AREA - наследование шаблонов</b><br><br>

Данный тег не имеет параметров. Тег предназначен для разметки областей, которые
унаследованный шаблон перекрывает в шаблоне-предке. Название тега является
названием области (можно перекрывать сразу несколько областей, указывая им
разные имена, области также могут быть вложены друг в друга). Просто укажите в
шаблоне-предке область, которую нужно перекрыть в шаблоне-потомке, указав в ее
начале открывающий тег area, а в конце - закрывающий. В шаблоне-потомке нужно
только указать те же два тега area, а между ними - замещающий фрагмент.<br><br>

Рассмотрим простой пример. Допустим, шаблон-предок выглядит так:<br><br>

<b>Шапка<br>
&lt;area:content&gt;<br>
Содержание<br>
&lt;/area:content&gt;<br>
Подвал</b><br><br>

А шаблон, унаследованный от него, выглядит так:<br><br>

<b>&lt;area:content&gt;<br>
Новое содержание<br>
&lt;/area:content&gt;</b><br><br>

В таком случае во время компиляции шаблон-потомок будет выглядеть так:<br><br>

<b>Шапка<br>
Новое содержание<br>
Подвал</b><br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Тег INSERT - вставка шаблонов друг в друга</b><br><br>

Шаблоны можно использовать не только для непосредственной генерации текста
страниц. Шаблоны могут быть также и вспомогательными, что-то типа процедур или
функций в программировании. Такие вспомогательные шаблоны можно вставлять в
основные, а также друг в друга. Синтаксис тега очень простой: укажите в
качестве названия тега название шаблона, который вы хотите вставить, и в списке
параметров укажите те параметры и значения, которые вы хотите передать этому
шаблону. Примеры:<br><br>

<b>&lt;insert:headLine/&gt;</b> - простая вставка шаблона headLine.<br>
<b>&lt;insert:button value=&quot;Нажмите меня!&quot;/&gt;</b> - вставка шаблона
button с передачей ему параметра value.<br>
<b>&lt;insert:decor&gt;Добро пожаловать!&lt;/insert:decor&gt;</b> - вставка
шаблона decor с передачей ему контента.<br><br>

Переданные шаблону параметры можно использовать внутри него, например, при
помощи тегов &lt;var:...&gt; или &lt;write:...&gt;.<br>
Особый случай представляет использование параметра <b>currentScope</b>:<br><br>

<b>&lt;insert:anotherTemplate currentScope/&gt;</b><br><br>

В данном случае шаблону anotherTemplate будет передан весь набор переменных
текущего шаблона.<br>
Вот еще один любопытный пример:<br><br>

<b>&lt;insert:menu&gt;<br>
&lt;insert:menuItem link=&quot;index&quot; title=&quot;Домой&quot;/&gt;<br>
&lt;insert:menuItem link=&quot;shop&quot; title=&quot;Магазин&quot;/&gt;<br>
&lt;insert:menuItem link=&quot;forum&quot; title=&quot;Форум&quot;/&gt;<br>
&lt;/insert:menu&gt;</b><br><br>

Данный фрагмент формирует меню, а уж как оно будет выглядеть на экране -
полностью зависит от шаблонов menu и menuItem.<br>
Помните, что данный тег относится к категории парных, и не забывайте про
закрывающие/комбинированные теги.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Тег LOGIC, часть 1 - проверка условий</b><br><br>

С помощью тегов проверки условия можно создавать шаблоны, которые ведут себя
по-разному в зависимости от текущих настроек проекта или переданных шаблону
данных. Все условные теги работают по одному принципу: проверяют некоторое
условие, и если оно выполняется - то выполняется та часть шаблона, которая
заключена между открывающим и закрывающим тегами. В противном случае эта часть
шаблона игнорируется.<br><br>

Независимо от типа условия, тегу следует передать параметр <b>property</b> -
это исходные данные для сравнения. Некоторым типам условия также нужно передать
параметр <b>value</b> (значение для сравнения). Тип условия передается в
названии тега. Поддерживаемые условия перечислены ниже.<br><br>

Следующим условиям следует передать один параметр <b>property</b>:<br>
<ul>
<li><b>present</b> (присутствует) - истина, если параметр присутствует.</li>
<li><b>notPresent</b> (отсутствует) - истина, если параметр отсутствует.</li>
<li><b>empty</b> (пусто) - истина, если параметр отсутствует или сводится к нулю.</li>
<li><b>notEmpty</b> (не пусто) - истина, если параметр присутствует и не нуль.</li>
<li><b>test</b> (произвольное условие) - истина, если указанное в property
выражение сводится к истине.</li>
</ul><br>

Следующим условиям следует передать параметры <b>property</b> и <b>value</b>:<br>
<ul>
<li><b>equal</b> (равно) - истина, если значение параметра property равно
значению параметра value.</li>
<li><b>notEqual</b> (не равно) - истина, если property не равно value.</li>
<li><b>less</b> (меньше) - истина, если property &lt; value.</li>
<li><b>greater</b> (больше) - истина, если property &gt; value.</li>
<li><b>lessEqual</b> (меньше или равно) - истина, если property &lt;= value.</li>
<li><b>greaterEqual</b> (больше или равно) - истина, если property &gt;= value.</li>
<li><b>regexp</b> (подходит к регулярному выражению) - истина, если строка
property подходит к регулярному выражению value.</li>
<li><b>notRegexp</b> (не подходит к регулярному выражению) - истина, если
строка property не подходит к регулярному выражению value.</li>
</ul><br>

Следующим условиям не нужны никакие параметры:<br>
<ul>
<li><b>admin</b> (администратор) - истина, если клиент - администратор.</li>
<li><b>notAdmin</b> (не администратор) - истина, если клиент - обычный
пользователь.</li>
<li><b>local</b> (локальный проект) - истина, если проект запущен на локальном
сервере (адрес сервера 127.0.0.1).</li>
<li><b>notLocal</b> (глобальный проект) - истина, если проект запущен на
настоящем сервере в Сети.</li>
</ul><br>

Условному тегу также можно передать параметры <b>then</b> и <b>else</b> (строки
или строковые переменные), если условие тега выполняется, будет выведено
значение параметра then, в противном случае - значение параметра else.<br><br>

Несколько примеров использования условных тегов:<br><br>

<b>&lt;logic:present property=flag&gt;<br>
Шаблону был передан параметр flag<br>
&lt;/logic:present&gt;</b><br><br>

<b>&lt;logic:test property=&quot;$cash<$price&quot;&gt;<br>
Вашей суммы на счету (&lt;var:cash&gt;) недостаточно, чтобы оплатить стоимость
товара (&lt;var:price&gt;).<br>
&lt;/logic:test&gt;</b><br><br>

<b>&lt;logic:less property=cash value=price&gt;<br>
Вашей суммы на счету (&lt;var:cash&gt;) недостаточно, чтобы оплатить стоимость
товара (&lt;var:price&gt;).<br>
&lt;/logic:less&gt;</b><br><br>

<b>&lt;logic:admin then=&quot;Привет, администратор!&quot;
else=&quot;Здравствуйте, посетитель...&quot;/&gt;</b><br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Тег LOGIC, часть 2 - выполнение циклов</b><br><br>

У тега <b>logic</b> есть и еще одно, не менее важное назначение. С помощью тега
<b>logic:iterator</b> можно сделать так, что часть шаблона будет обрабатываться
несколько раз, пробегая все или часть значений некоторого массива. Внутри цикла
можно использовать данные текущего элемента, как если бы это были обычные
переменные. Вы можете использовать итератор, например, для того, чтобы вывести
на экран список новостей сайта, сделать баннерную крутилку или для отображения
данных фотогалереи. Важно помнить, что для использования итератора необходимо,
чтобы исходные данные были заранее подготовлены для удобного вывода - этой
подготовкой, конечно, должен заниматься пакет.<br><br>

Итератор поддерживает следующие параметры:<br>
<ul>
<li><b>property</b> - исходный массив, по которому производится итерирование.</li>
<li><b>item</b> - укажите в кавычках имя переменной, и внутри цикла в эту
переменную будет записано содержимое очередного элемента исходного массива.</li>
<li><b>key</b> - укажите в кавычках имя переменной, и в цикле в нее будет
записано значение ключа очередного элемента в исходном массиве.</li>
<li><b>index</b> - укажите в кавычках имя переменной для сохранения индекса
очередного элемента массива (начиная с 0).</li>
<li><b>index0</b> - то же самое, что и index, только вместо 0 в переменную
будет записана пустая строка.</li>
<li><b>index1</b> - то же самое, что и index, только индекс начинается с
единицы, а не с нуля.</li>
<li><b>offset</b> - индекс элемента, с которого надо начать итерирование.</li>
<li><b>start</b> - укажите значение ключа (не путать с индексом) элемента, с
которого должно начаться итерирование.</li>
<li><b>stop</b> - укажите значение ключа элемента, на котором итерирование
немедленно прекращается. Сам этот элемент также не будет обработан.</li>
<li><b>count</b> - укажите максимальное количество элементов, которые могут
быть обработаны в цикле.</li>
<li><b>chunk</b> - номер блока из count (см. выше) элементов, с которого надо
начать итерирование.</li>
<li><b>separator</b> - укажите произвольную строку-разделитель, которая будет
выводиться между итерациями.</li>
</ul><br>

Обязательным является только параметр <b>property</b>.<br>
Напоследок - несколько примеров:<br><br>

<b>Кто сейчас в онлайне:<br>
&lt;logic:iterator property=onlineUsers item=&quot;username&quot;
separator=&quot;,&quot;&gt;<br>
&lt;var:username&gt;<br>
&lt;/logic:iterator&gt;</b><br><br>

<b>Новости сайта:<br>
&lt;logic:iterator property=newsArray item=&quot;news&quot;&gt;<br>
Автор: &lt;var:news:author&gt;<br>
Новость: &lt;var:news:content&gt;<br>
Комментариев: &lt;var:news:commentsCount&gt;<br>
&lt;/logic:iterator&gt;</b><br><br>

<b>Новости сайта, другой вариант:<br>
&lt;logic:iterator property=newsArray item=&quot;news&quot;&gt;<br>
&lt;insert:showNews news=news/&gt;<br>
&lt;/logic:iterator&gt;</b><br><br>

В последнем случае в цикле вызывается шаблон showNews, которому передается
параметр news (текущая новость). Шаблон, в свою очередь, выводит эту новость на
экран, попутно оформляя ее так, как это необходимо.<br><br><hr><br>

<!----------------------------------------------------------------------------->

<b>Комментарии в шаблонах</b><br><br>

Если вы хотите вставить комментарий в шаблон, просто заключите его в комбинации
символов <b>&lt;?--</b> и <b>--?&gt;</b>. Любой текст, находящийся внутри этих
ограничителей, будет полностью удален из шаблона во время компиляции и не
попадет в готовый HTML-код. Комментарии можно использовать для описания
назначения и особенностей шаблона, а также просто для того, чтобы временно
&quot;выключить&quot; часть его текста.<br><br><hr>
</section:tags>

<section:tips>
<b>Рекомендации по разработке сайта</b><br><br>

Если вы только что начали работу над новым сайтом, у вас наверняка возник
вопрос &quot;с чего начать?&quot; Есть ряд небольших хитростей, которые помогут
вам облегчить процесс разработки сайта с нуля. Пожалуйста, прочитайте
внимательно эти рекомендации.<br><br>

<ul>
<li><b>Давайте страницам, шаблонам и пакетам нормальные имена.</b> Создавая
новую страницу, шаблон или пакет, старайтесь давать им понятные имена
(например, guestbookReply), чтобы потом по одному названию понимать смысл.
Существует хороший стандарт именования (т. н. studlyCaps), по которому имя
собирается из слов без разделителей, причем первое слово пишется с маленькой
буквы, остальные - с большой.</li>
<li><b>Создайте базовую страницу.</b> В большинстве случаев все страницы сайта
выглядят похоже - одинаковое оформление, различное содержание. Создайте базовую
страницу (например &quot;general&quot;), которая будет прообразом всех
остальных страниц сайта, и другие страницы наследуйте от нее. Если вам в
будущем потребуется внести изменения во все страницы сайта, достаточно будет
изменить только базовую страницу. Страницу эту стоит сделать
&quot;невидимой&quot;, чтобы пользователи не смогли загрузить ее у себя.</li>
<li><b>Создайте базовый шаблон.</b> Аналогичным образом, стоит создать базовый
шаблон, который станет прообразом других шаблонов (разумеется, это касается
только тех шаблонов, которые используются на страницах. Вспомогательные шаблоны
остаются сами по себе). В базовом шаблоне можно указать тег
&lt;area:content/&gt;, расположенный в центральной части страницы, а в
унаследованных от него шаблонах &quot;перекрыть&quot; только эту область тегами
&lt;area:content&gt; ... &lt;/area:content&gt;, не заботясь об оформлении
страницы. Если в будущем понадобится изменить дизайн всех страниц, достаточно
будет внести изменения только в базовый шаблон.</li>
<li><b>Пользуйтесь официальными модулями.</b> Если вам нужен скрипт новостей,
рассылка или гостевая книга - ни в коем случае не пишите эти вещи
самостоятельно! :) PHPC изначально задумывался как модульная система. Зайдите
на официальный сайт PHPC (<a href="http://www.phpc.ru/"
target="_blank">www.phpc.ru</a>), скорее всего, такой модуль там уже есть.
Достаточно будет скачать его, установить, и встроить его готовую механику в
дизайн вашего сайта.</li>
<li><b>Максимально структурируйте дизайн сайта.</b> Помните, что шаблоны служат
не только для отображения целых страниц. Шаблоны могут быть вспомогательными, и
их можно вставлять друг в друга (при этом передавая параметры и используя их).
Создавайте для отдельных частей дизайна свои шаблоны (обычно у таких шаблонов
имя начинается на &quot;html&quot;), и собирайте из них страницу, как из
деталей конструктора.</li>
<li><b>Не создавайте слишком сложных пакетов.</b> Главное предназначение пакета
- извлечь данные из базы, подготовить их для удобного отображения и передать в
шаблон. Реже - выполнение каких-либо конкретных действий. Старайтесь держать
пакеты небольшими и понятными. Если какой-то пакет слишком разрастается,
возможно, это причина для вынесения кода в отдельный самостоятельный плагин.</li>
<li><b>Комментируйте свое творение.</b> И в шаблонах, и в пакетах можно (и
нужно) использовать комментарии. В шаблонах это теги &lt;?-- ... --?&gt;, в
пакетах - обычные PHP комментарии, как однострочные, так и многострочные. Не
стесняйтесь описывать назначение и особенности вашего кода - это здорово
пригодится вам самим в будущем.</li>
</ul><br><hr>
</section:tips>

<section:afterword>
<b>Послесловие</b><br><br>

PHPC - бесплатная система, которая развивается на чистом энтузиазме ее автора.
Если у вас есть вопросы, связанные с PHPC, если вы хотите высказать пожелания,
предложения, свои впечатления или критику, посетите официальный сайт системы -
<a href="http://www.phpc.ru/" target="_blank">www.phpc.ru</a>, или свяжитесь с
автором (<a href="mailto:dagdamor@phpc.ru">dagdamor@phpc.ru</a>). Я буду рад
любому сотрудничеству.<br><br>

<div align="right"><b>С уважением,<br>
Сергей Игитов (Dagdamor).</b></div><br><hr>
</section:afterword>
